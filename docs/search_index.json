[["desarrollo-del-proyecto.html", "Capítulo 2 Desarrollo del proyecto 2.1 Conversión a Formato de Serie de Tiempo 2.2 Imagen Serie de Tiempo 2.3 Graficas de la Decomposición de los Datos 2.4 Ciclo de las series de tiempo", " Capítulo 2 Desarrollo del proyecto Para la obtención de los indices de S&amp;P500 usaremos la biblioteca quantmod, esta es una herramienta en R que proporciona funciones para la descarga, manejo y análisis de datos financieros. No almacena ni proporciona datos financieros en sí misma, sino que se basa en diversas fuentes de datos para obtener información del mercado. # Cargamos los datos del S&amp;P 500 sp500_returns &lt;- getSymbols(&quot;^GSPC&quot;, from = &quot;2010-01-01&quot;, to = Sys.Date()) La función getSymbols() descarga los datos del índice S&amp;P 500 desde la fuente de datos especificada y los almacena en un objeto llamado “GSPC”. En nuestra etapa exploratoria podemos observar que la fecha inicial es efectivamente enero del 2010 y la fecha final es la fecha actual. head(GSPC) ## GSPC.Open GSPC.High GSPC.Low GSPC.Close GSPC.Volume GSPC.Adjusted ## 2010-01-04 1116.56 1133.87 1116.56 1132.99 3991400000 1132.99 ## 2010-01-05 1132.66 1136.63 1129.66 1136.52 2491020000 1136.52 ## 2010-01-06 1135.71 1139.19 1133.95 1137.14 4972660000 1137.14 ## 2010-01-07 1136.27 1142.46 1131.32 1141.69 5270680000 1141.69 ## 2010-01-08 1140.52 1145.39 1136.22 1144.98 4389590000 1144.98 ## 2010-01-11 1145.96 1149.74 1142.02 1146.98 4255780000 1146.98 tail(GSPC) ## GSPC.Open GSPC.High GSPC.Low GSPC.Close GSPC.Volume GSPC.Adjusted ## 2024-05-10 5225.49 5239.66 5209.68 5222.68 3617900000 5222.68 ## 2024-05-13 5233.08 5237.26 5211.16 5221.42 4255710000 5221.42 ## 2024-05-14 5221.10 5250.37 5217.98 5246.68 4763580000 5246.68 ## 2024-05-15 5263.26 5311.76 5263.26 5308.15 4360810000 5308.15 ## 2024-05-16 5310.07 5325.49 5296.19 5297.10 3817470000 5297.10 ## 2024-05-17 5303.10 5305.45 5283.59 5303.27 3578120000 5303.27 A continuación, realizaremos una conversión de datos a zoo (Z’s Ordered Observations) y ts (Time Series). Un objeto zoo es una serie temporal ordenada que consiste en un vector de datos con una marca de tiempo asociada a cada observación. Esto permite que las observaciones estén indexadas por fechas o por otro tipo de marca de tiempo, mientras un objeto ts es una serie temporal que representa un conjunto de observaciones regularmente espaciadas en el tiempo, como datos mensuales, trimestrales o anuales. Se caracteriza por tener un vector de datos y un vector de fechas o periodos de tiempo. 2.1 Conversión a Formato de Serie de Tiempo Para realizar la respectica serie de tiempo, haremos uso de la función ts, donde la frecuencia al ser data que llega de forma mensual sera de 12. #Realizamos la agrupación por mes GSPC_month=to.monthly(GSPC) head(GSPC_month) ## GSPC.Open GSPC.High GSPC.Low GSPC.Close GSPC.Volume GSPC.Adjusted ## ene. 2010 1116.56 1150.45 1071.59 1073.87 90947580000 1073.87 ## feb. 2010 1073.89 1112.42 1044.50 1104.49 84561340000 1104.49 ## mar. 2010 1105.36 1180.69 1105.36 1169.43 103683550000 1169.43 ## abr. 2010 1171.23 1219.80 1170.69 1186.69 116741910000 1186.69 ## may. 2010 1188.58 1205.13 1040.78 1089.41 127662780000 1089.41 ## jun. 2010 1087.30 1131.23 1028.33 1030.71 110106750000 1030.71 TS_GSPC= ts(GSPC_month$GSPC.Close, frequency = 12, start = c(2010,1)) head(TS_GSPC) ## GSPC.Close ## [1,] 1073.87 ## [2,] 1104.49 ## [3,] 1169.43 ## [4,] 1186.69 ## [5,] 1089.41 ## [6,] 1030.71 2.2 Imagen Serie de Tiempo plot(TS_GSPC) A continuación, realizaremos el proceso de descomposición estacional a la serie temporal utilizando la función decompose(), la cual separa la serie temporal en tres componentes: tendencia, estacionalidad y residuos. Almacenaremos el resultado de esta operación en el objeto GSCP_month_decomp. # Descomposición de la data agrupada por mes suppressWarnings({ GSCP_month_decomp &lt;- decompose(TS_GSPC) }) 2.3 Graficas de la Decomposición de los Datos # Establecemos el diseño de la ventana de gráficos en tres filas y una columna par(mfrow=c(3,1)) plot(GSCP_month_decomp$trend, main = &quot;Tendencia&quot;) plot(GSCP_month_decomp$seasonal, main = &quot;Estacionalidad&quot;) plot(GSCP_month_decomp$random, main = &quot;Residuos&quot;) En el grafico anterior podemos observar que la tendencia de los indices S&amp;P500 es de incrementalidad, con periodos de estacionalidad de cada 2 años aproximadente. Y un periodo muy remarcado de Residuos para la pandemia del covid del 2020. 2.4 Ciclo de las series de tiempo Cuando se realiza una descomposición de series temporales, los residuos son la parte de la serie temporal que no se puede explicar mediante la tendencia y la estacionalidad. Si hay ciclos en los datos, es probable que estos se reflejen en los residuos. Esto significa que los ciclos pueden manifestarse como patrones periódicos o fluctuaciones en los residuos después de que se hayan eliminado la tendencia y la estacionalidad. En este caso, podemos observar que los ciclos no tienen grnades variaciones en el tiempo. boxplot(TS_GSPC~cycle(TS_GSPC)) "],["modelo-arimaautoregressive-integrated-moving-average.html", "Capítulo 3 Modelo ARIMA(AutoRegressive Integrated Moving Average) 3.1 Determinación de Estacionaridad 3.2 Diferenciación de la Serie", " Capítulo 3 Modelo ARIMA(AutoRegressive Integrated Moving Average) Para el respectivo desarrollo de nuestro modelo ARIMA es necesaria la instalación de dos librerias: if(!require(forecast)) install.packages(&quot;forecast&quot;) ## Loading required package: forecast if(!require(tseries)) install.packages(&quot;tseries&quot;) library(forecast) library(tseries) 3.1 Determinación de Estacionaridad Una serie temporal es estacionaria si sus propiedades estadísticas, como la media y la varianza, son constantes a lo largo del tiempo. En otras palabras, los datos no deben mostrar tendencias (crecientes o decrecientes) ni cambios en la varianza. Esta prueba es importante para el correcto desarrollo del modelo ARIMA, ya que este modelo requiere que los datos sean estacionarios para funcionar correctamente. Si la serie temporal no es estacionaria, los resultados del modelo pueden ser incorrectos o poco fiables. 3.1.1 Prueba de Dickey-Fuller Aumentada (ADF) La prueba de Dickey-Fuller aumentada (ADF) es una prueba estadística utilizada para determinar si una serie temporal es estacionaria. Esta prueba tiene la hipótesis nula de que la serie temporal tiene una raíz unitaria, lo que implica no estacionariedad. Si el valor p es menor que un nivel de significancia (por ejemplo, 0.05): Rechazas la hipótesis nula y concluyes que la serie es estacionaria. Si el valor p es mayor que el nivel de significancia: No puedes rechazar la hipótesis nula y concluyes que la serie no es estacionaria. adf_result &lt;- adf.test(TS_GSPC) print(adf_result) ## ## Augmented Dickey-Fuller Test ## ## data: TS_GSPC ## Dickey-Fuller = -1.9702, Lag order = 5, p-value = 0.5887 ## alternative hypothesis: stationary Dado que el valor p es 0.5887, que es mucho mayor que 0.05, no podemos rechazar la hipótesis nula. Esto significa que, según los resultados de esta prueba, no hay suficiente evidencia para concluir que la serie temporal TS_GSPC es estacionaria. 3.2 Diferenciación de la Serie La diferenciación es una técnica que se utiliza en el análisis de series temporales para hacer que los datos sean más estables y uniformes. Este proceso ayuda a eliminar las tendencias y estabilizar la variabilidad en los datos a lo largo del tiempo. Funciona restando para cada punto en la serie temporal la diferencia entre el valor actual y el valor anterior, esto elimina tendencias crecientes o decrecientes en los datos, haciendo que la serie sea más estable y ayuda a hacer que la variabilidad en los datos sea más constante, lo que facilita el análisis y modelado. Para nuestro caso realizamos la diferenciación sobre el conjunto de datos de los precios de cierre con una frecuencia mensual que ya habiamos obtenido anteriormente TS_GSPC. diff_data_sp500 &lt;- diff(TS_GSPC) Ahora, con la nueva serie temporal diferenciada realizaremos la prueba de Dickey-Fuller Aumentada (ADF) de nuevo para verificar que sea estacionaria. adf_result_diff &lt;- adf.test(diff_data_sp500) ## Warning in adf.test(diff_data_sp500): p-value smaller than printed p-value print(adf_result_diff) ## ## Augmented Dickey-Fuller Test ## ## data: diff_data_sp500 ## Dickey-Fuller = -5.5975, Lag order = 5, p-value = 0.01 ## alternative hypothesis: stationary Dado que el valor p es 0.01, podemos rechazar la hipótesis nula. Esto significa que hay suficiente evidencia para concluir que la serie temporal con frecuencia mensual diferenciada diff_data_sp500 es estacionaria. La advertencia de que el p-value es menor al valor impreso indica que el verdadero p-value es muy pequeño, incluso menor a 0.01, lo cual refuerza aún más la conclusión de que la serie es estacionaria. "],["desarrollo-del-modelo-arima.html", "Capítulo 4 Desarrollo del modelo ARIMA 4.1 Ajuste del Modelo 4.2 Diagnostico de Modelo 4.3 Predicciones del Modelo", " Capítulo 4 Desarrollo del modelo ARIMA 4.1 Ajuste del Modelo Ahora a partir de nuestro dataset diff_data_sp500, vamos a proceder a ajustar el modelo ARIMA. model &lt;- auto.arima(diff_data_sp500) summary(model) ## Series: diff_data_sp500 ## ARIMA(0,0,1) with non-zero mean ## ## Coefficients: ## ma1 mean ## -0.1840 24.3571 ## s.e. 0.0776 7.9601 ## ## sigma^2 = 16514: log likelihood = -1078.3 ## AIC=2162.6 AICc=2162.74 BIC=2172.04 ## ## Training set error measures: ## ME RMSE MAE MPE MAPE MASE ## Training set 0.01563911 127.7576 89.02069 -172.2868 408.0721 0.7141311 ## ACF1 ## Training set 0.007093156 4.2 Diagnostico de Modelo En este paso vamos a revisar los residuos del modelo para asegurarnos que se comportan como un ruido blanco. Con la prueba de Ljung-Box, esta una prueba estadística utilizada para verificar la independencia de los residuos en un modelo de serie temporal. En otras palabras, evalúa si los residuos (diferencias entre los valores observados y los valores predichos) están correlacionados o no. checkresiduals(model) ## ## Ljung-Box test ## ## data: Residuals from ARIMA(0,0,1) with non-zero mean ## Q* = 44.654, df = 23, p-value = 0.004381 ## ## Model df: 1. Total lags used: 24 Dado que el valor p es 0.004381, que es menor que 0.05, podemos rechazar la hipótesis nula. Esto significa que hay suficiente evidencia para concluir que los residuos del modelo ARIMA(0,0,1) no son independientes, es decir, hay autocorrelación significativa en los residuos. Esto sugiere que el modelo ARIMA(0,0,1) no ha capturado toda la estructura de la serie temporal y que podría ser necesario ajustar un modelo más complejo o revisar los parámetros del modelo. 4.3 Predicciones del Modelo A continuación, vamos a realizar una predicción de los proximos 12 meses de nuestro modelo para analizar los resultados. # Pronosticar los próximos 12 periodos forecasted &lt;- forecast(model, h=12) plot(forecasted) En la grafica podemos ver las predicciones para los próximos 12 periodos, la cual se extiende desde el final de la serie temporal original. Las bandas sombreadas alrededor de la línea de predicciones indican los intervalos de confianza, con las bandas más estrechas representando mayor certeza y las bandas más anchas representando mayor incertidumbre. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
